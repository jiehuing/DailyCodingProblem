The game of Nim is played as follows. Starting with three heaps, each containing a variable number of items,
two players take turns removing one or more items from a single pile. The player who eventually is forced to take the last stone loses. 
For example, if the initial heap sizes are 3, 4, and 5, a game could be played as shown below:

  A  |  B  |  C
-----------------
  3  |  4  |  5
  3  |  1  |  3
  3  |  1  |  3
  0  |  1  |  3
  0  |  1  |  0
  0  |  0  |  0 
In other words, to start, the first player takes three items from pile B. The second player responds by removing two stones from pile C.
The game continues in this way until player one takes last stone and loses.

Given a list of non-zero starting values [a, b, c], and assuming optimal play, determine whether the first player has a forced win.



Attempt
the pile can be split into three states
0, 1, 1+
Since 1+ can just be removed to 1 or 0.
Brute Force

Case 0
0 0 0 
No Game

Case 1
0 0 1
First player Lose

Case 2
0 1 1
First player win

Case 3
1 1 1
First Player lose

Case 4
0 0 1+
First Player wins

Case 5
0 1 1+
First Player wins

Case 6
1 1 1+
First player can force it to case 3 for player 2, First player win

Case 7
0 1+ 1+
Testing our hypothesis with
0 3 3
since we can reduce it to 0 1 1,
First player will win.
Let's try
1st   0 3 2
2nd   0 2 2
1st   0 1 2
2nd   0 1 0
2nd player win

let's see if there is another way for player 1 to force a win.
1st   0 3 1
2nd   0 0 1
2nd player win

Taking 3
1st   0 3 0
2nd   0 1 0
2nd player wins

Testing case 7 with
      0 2 2
1st   0 1 2
2nd   0 1 0
2nd player win

      0 2 2
1st   0 0 2
2nd   0 0 1
2nd players win


Hypothesis
See how 0 2 2 and 0 3 3 are even?
Maybe even odd state determines win loss
0 2 3 can be reduced to 0 2 2 so if odd means player 1 win
This does not applies to 0 1 1 though. Separate cases.

Testing case 7 with
      0 4 4
1st   0 4 3
2nd   0 3 3
2nd Player win

      0 4 4
1st   0 4 2
2nd   0 2 2
2nd Player win

      0 4 4
1st   0 4 1
2nd   0 0 1
2nd Player wins

      0 4 4
1st   0 0 4
2nd   0 0 1
2nd Player wins

Hypothesis seems invalid for 0 4 2
We need to find remainder for 4

Interject
To determine the type of cases, we can use regex.

Case 7 (odd player 1 wins, even, player 2 wins)


Case 8
1 1+ 1+
if 1 even,
Player 1 wins by removing the first stone
if 1 odd,
Player 1 removes 2 stones, passing the situation to player 2,
player 2 removes 2 stones, passing the situation to player 1.

Test with

      1 4 4
1st   1 2 4
2nd   1 2 2
1st   1 

Case 9
1+ 1+ 1+
This is the most interesting case
if 3 4 5
Player 1 can force a win by taking out 1st stack if remaining is even.
If remaining is odd, player 1 can switch the outcome by leaving a 1 in the first column.
Player 1 always wins.






pseudo code
Base is 0 0 0
boolean player1Wins = true
go through each number
if number = 0, do nothing
if number = 1, player1Wins != player1 Wins (this will flip player1Wins boolean, true to false, false to true)
if number > 1, 

